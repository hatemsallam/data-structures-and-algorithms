/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
  @Test
  public void addVertex(){

    Graph graph = new Graph();

    graph.addVertex("Hatem");
    graph.addVertex("Tareq");

    assertNotNull(graph.getVertices());
    assertEquals(2,graph.size());
  }

  @Test
  public void addEdge(){

    Graph graph = new Graph();

    graph.addVertex("Hatem");
    graph.addVertex("Tareq");
    graph.addEdge("Hatem", "Tareq");

    assertEquals("Vertex{label='Hatem', weight=0}[Vertex{label='Tareq', weight=0}]Vertex{label='Tareq', weight=0}[Vertex{label='Hatem', weight=0}]", graph.printGraph());
  }

  @Test
  public void vertexNeighbors(){

    Graph graph = new Graph();

    graph.addVertex("Hatem");
    graph.addVertex("Tareq");
    graph.addVertex("Doaa");
    graph.addVertex("Mohammad");
    graph.addEdge("Hatem", "Doaa");
    graph.addEdge("Hatem", "Tareq");
    graph.addEdge("Mohammad", "Tareq");

    assertEquals("[Vertex{label='Doaa', weight=0}, Vertex{label='Tareq', weight=0}]",graph.getNeighbors("Hatem").toString());
    assertEquals("[Vertex{label='Tareq', weight=0}]", graph.getNeighbors("Mohammad").toString());

  }

  @Test
  public void emptyGraph(){

    Graph graph = new Graph();
    assertEquals(0,graph.size());
    assertEquals("[]", graph.getVertices().toString());
  }
  //    <<<Code Challenge 36 >>
  @Test
  public void breadthFirst(){

    Graph graph1 = new Graph();

    graph1.addVertex("Hatem");
    graph1.addVertex("Tareq");
    graph1.addVertex("Doaa");
    graph1.addVertex("Mohammad");
    graph1.addVertex("Osaid");
    graph1.addVertex("Naim");

    graph1.addEdge("Hatem", "Tareq");
    graph1.addEdge("Tareq", "Doaa");
    graph1.addEdge("Tareq", "Mohammad");
    graph1.addEdge("Doaa", "Osaid");
    graph1.addEdge("Doaa", "Naim");
    graph1.addEdge("Doaa", "Mohammad");
    graph1.addEdge("Mohammad", "Naim");
    graph1.addEdge("Osaid", "Naim");


    assertEquals("[Hatem, Tareq, Doaa, Mohammad, Osaid, Naim]", graph1.breadthTraverse("Hatem").toString());
  }

  @Test
  public void breadthFirstOneVertex(){

    Graph graph1 = new Graph();

    graph1.addVertex("Hatem");
    assertEquals("[Hatem]",graph1.breadthTraverse( "Hatem").toString());
  }

  //    THIS TEST FOR THREE VERTICES AND ONE OF THEM DID NOT CONNECT WITH THE OTHER TWO VERTICES
  @Test
  public void breadthFirstTest(){

    Graph graph1 = new Graph();

    graph1.addVertex("Hatem");
    graph1.addVertex("Tareq");
    graph1.addVertex("Doaa");

    graph1.addEdge("Hatem", "Tareq");

    assertEquals("[Hatem, Tareq]",graph1.breadthTraverse( "Hatem").toString());
  }
//    <<< Code Challenge 37 >>>

  @Test
  public void businessTripTest(){

    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

    List<String> cities1 = new ArrayList<>();
    cities1.add("Pandora");
    cities1.add("Arendelle");
    assertEquals(150, graph2.businessTrip(graph2, cities1));

    List<String> cities2 = new ArrayList<>();
    cities2.add("Pandora");
    cities2.add("Arendelle");
    cities2.add("Monstroplolis");
    assertEquals(192, graph2.businessTrip(graph2, cities2));

  }

  @Test
  public void businessTripNoEdge(){

    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

    List<String> cities1 = new ArrayList<>();
    cities1.add("Pandora");
    cities1.add("Monstroplolis");
    assertEquals(0, graph2.businessTrip(graph2, cities1));
  }

  @Test
  public void businessTripAtLeastOnoEdge(){

    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");
    graph2.addVertex("Naboo");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);
    graph2.addEdgeWithWeight("Naboo", "Monstroplolis",42);


    List<String> cities1 = new ArrayList<>();
    cities1.add("Pandora");
    cities1.add("Naboo");
    cities1.add("Monstroplolis");
    assertEquals(42, graph2.businessTrip(graph2, cities1));
  }

}
