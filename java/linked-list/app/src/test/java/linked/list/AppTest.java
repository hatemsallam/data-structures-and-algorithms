/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
  @Test
  void successfullyInstantiate(){
    LinkedList linkedList = new LinkedList();
    assertNull(linkedList.getHead() , "The Linked List should be empty");
  }
  @Test
  void insert(){
    LinkedList linkedList = new LinkedList();
    linkedList.insert("H");
    assertTrue(linkedList.include("H") , "Insertion Fiald");
  }
  @Test
  void isHeadCorrect(){
    LinkedList linkedList = new LinkedList();
    linkedList.insert("H");
    linkedList.insert("G");
    linkedList.insert("S");
    linkedList.insert("F");
    assertEquals(linkedList.getHead().getData() , "F" , "The head is not pointing on First Element");
  }
  @Test
  void insertMultipleNodes (){
    LinkedList linkedList = new LinkedList();
    linkedList.insert("H");
    linkedList.insert("G");
    linkedList.insert("S");
    linkedList.insert("F");
    assertTrue(linkedList.include("F"), "There is something wrong With Multiple Nodes Insertion");
    assertTrue(linkedList.include("S"), "There is something wrong With Multiple Nodes Insertion");
    assertTrue(linkedList.include("G"), "There is something wrong With Multiple Nodes Insertion");
    assertTrue(linkedList.include("H"), "There is something wrong With Multiple Nodes Insertion");
  }
  @Test
  void findExistValue(){
    LinkedList linkedList = new LinkedList();
    linkedList.insert("H");
    linkedList.insert("G");
    linkedList.insert("S");
    linkedList.insert("F");
    assertTrue(linkedList.include("F") , "The head is not pointing on First Element");
  }
  @Test
  void findNonExistValue(){
    LinkedList linkedList = new LinkedList();
    linkedList.insert("H");
    linkedList.insert("G");
    linkedList.insert("S");
    linkedList.insert("F");
    assertFalse(linkedList.include("D") , "The head is not pointing on First Element");
  }
  @Test
  void returnAllList (){
    LinkedList linkedList = new LinkedList();
    linkedList.insert("H");
    linkedList.insert("G");
    linkedList.insert("S");
    linkedList.insert("F");
    assertEquals(linkedList.toString() , "{ F } ->{ S } ->{ G } ->{ H } -> null" , "There is something wrong With Multiple Nodes Insertion");

  }
  @Test
  void successfullyAddANodeToTheEnd(){
    LinkedList linkedList = new LinkedList();
    linkedList.append("M");
    linkedList.append("N");
    linkedList.append("D");
    assertEquals("{ M } ->{ N } ->{ D } -> null",linkedList.toString(),"The D Char should be in the end of the linked list");

  }

  @Test
  void successfullyAddMultipleNodesToTheEnd (){
    LinkedList linkedList = new LinkedList();
    linkedList.append("M");
    linkedList.append("N");
    linkedList.append("D");
    linkedList.append("H");
    assertEquals("{ M } ->{ N } ->{ D } ->{ H } -> null",linkedList.toString(),"The method should be able to Add Multiple Nodes end of the linked list");

  }

  @Test
  void insertANodeBefore(){
    LinkedList linkedList = new LinkedList();
    linkedList.append("M");
    linkedList.append("N");
    linkedList.append("D");
    linkedList.append("H");
    linkedList.append("G");
    linkedList.insertBefore("D","R");
    assertEquals("{ M } ->{ N } ->{ R } ->{ D } ->{ H } ->{ G } -> null",linkedList.toString(),"R char should be added before D char");

  }

  @Test
  void insertANodeBeforeTheFirstNode(){
    LinkedList linkedList = new LinkedList();
    linkedList.append("M");
    linkedList.append("N");
    linkedList.append("D");
    linkedList.append("H");
    linkedList.append("G");
    linkedList.insertBefore("M","R");
    assertEquals("{ R } ->{ M } ->{ N } ->{ D } ->{ H } ->{ G } -> null",linkedList.toString(),"R char should be added at the beginning of the linked list ");
  }

  @Test
  void insertANodeAfterTheFirstNode(){
    LinkedList linkedList = new LinkedList();
    linkedList.append("M");
    linkedList.append("N");
    linkedList.append("O");
    linkedList.append("P");
    linkedList.append("Q");
    linkedList.insertAfter("M","R");
    assertEquals("{ M } ->{ R } ->{ N } ->{ O } ->{ P } ->{ Q } -> null",linkedList.toString(),"R char should be after M char");
  }

  @Test
  void insertANodeAfterTheLastNode(){
    LinkedList linkedList = new LinkedList();
    linkedList.append("M");
    linkedList.append("N");
    linkedList.append("O");
    linkedList.append("P");
    linkedList.append("G");
    linkedList.insertAfter("G","R");
    assertEquals("{ M } ->{ N } ->{ O } ->{ P } ->{ G } ->{ R } -> null",linkedList.toString(),"R char should be after G char");
  }

  @Test

  void oneOftheListsISEmpty() throws Exception {
    LinkedList list1 = new LinkedList();
    LinkedList list2 = new LinkedList();
    LinkedList list3 = new LinkedList();

    list1.append("A");
    list1.append("B");
    list1.append("C");
    list1.append("D");
    list1.append("E");
    list1.append("F");
    assertEquals(list1,list3.zipLists(list1,list2));
  }




}
